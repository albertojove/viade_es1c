{"version":3,"sources":["components/utils/select/Select.js","components/containers/visualizeTracks/VisualizeTrack.js","components/containers/uploadTracks/UploadTrack.js","components/navBar/NavBar.js","components/containers/shareTracks/ShareTrack.js","components/containers/downloadTracks/DownloadTrack.js","components/containers/welcome/Welcome.js","components/containers/login/Login.js","components/routes/Routes.js","App.js","i18n.js","index.js"],"names":["Select","props","id","options","defaultValue","onChange","rest","className","value","map","option","key","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","VisualizeTrack","t","useTranslation","useState","zoom","setZoom","positions","setPositions","center","setCenter","origin","setOrigin","target","setTarget","data","setData","elevation","setElevation","showElements","setShowElements","LoggedIn","Container","Row","Col","sm","Map","TileLayer","url","Polyline","color","Marker","position","Popup","style","parent","maxWidth","domainPadding","theme","VictoryTheme","material","colorScale","Button","variant","onClick","event","auth","trackSession","session","webId","urlRouteInPod","slice","length","concat","preventDefault","fc","FC","routes","readFolder","then","content","files","NotificationManager","warning","i","name","split","localeCompare","push","success","catch","err","console","error","selectedRouteName","document","getElementById","readFile","route","JSON","parse","points","elevationsValues","itinerary","numberOfItems","latitude","itemListElement","item","longitude","elevationValue","x","y","parseInt","LoggedOut","to","UploadTrack","times","processItem","a","reader","FileReader","nameFile","onload","fileContent","result","createFile","readAsText","processArray","array","forEach","fileInput","type","multiple","MyNavBar","Navbar","href","src","process","width","height","alt","Nav","data-tip","DropdownButton","title","DropdownItem","i18n","changeLanguage","LogoutButton","place","effect","ShareTrack","sendNotification","contact","setContact","uniqueIdentifier","Date","now","setDocumentUri","deshabilita","alert","onSubmit","htmlFor","e","data-testid","DownloadTrack","urlGlobal","setGlobal","newUrl","downloadRoute","file","blob","Blob","log","link","URL","createObjectURL","download","click","txt","Welcome","useWebId","Login","background","backgroundRepeat","backgroundPosition","backgroundSize","LoginButton","popup","rel","Routes","exact","path","component","App","backend","Backend","loadPath","use","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","react","wait","useSuspense","ReactDOM","render"],"mappings":"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","file":"static/js/main.5ef21426.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Select = props => {\n  const { id, options, defaultValue, onChange, ...rest } = props;\n  return (\n    <div className=\"\">\n      <select id={id} value={defaultValue} onChange={onChange} {...rest}>\n        {options &&\n          options.map(option => (\n            <option value={option} key={option}>\n              {option}\n            </option>\n          ))}\n      </select>\n    </div>\n  );\n};\n","import React, {useState} from \"react\";\nimport {Marker, Popup, TileLayer, Polyline, Map} from \"react-leaflet\";\nimport { VictoryArea, VictoryChart, VictoryTheme, VictoryStack } from 'victory';\nimport {LoggedIn, LoggedOut} from \"@solid/react\";\nimport {Button, Col, Row, Container} from 'react-bootstrap';\nimport {useTranslation} from \"react-i18next\";\nimport L from 'leaflet';\nimport FC from 'solid-file-client';\nimport {Select} from '../../utils/select/Select';\nimport {NotificationContainer, NotificationManager} from \"react-notifications\";\nimport { Redirect } from \"react-router-dom\";\n// CSS imports\nimport 'leaflet/dist/leaflet.css';\nimport \"./VisualizeTrack.css\";\nimport 'react-notifications/lib/notifications.css';\n\n// Marker's icon\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n/**\n * Component used to display routes on a map\n */\nexport const VisualizeTrack = (props) => {\n\n    // Locales for i18n\n    const {t} = useTranslation();\n\n    // Hooks for polyline, map, histogram\n    // Setting default values\n    const zoomValue = 11;\n    const [zoom, setZoom] = useState(zoomValue);\n    const [positions, setPositions] = useState();\n    const [center, setCenter] = useState([43.354444, -5.851667]);\n    const [origin, setOrigin] = useState(0);\n    const [target, setTarget] = useState(0);\n    const [data, setData] = useState([]);\n    const [elevation, setElevation] = useState([]);\n    const [showElements, setShowElements] = useState(false);\n\n    /**\n     * This function is invoked when the user selects a route in the combobox. It's function\n     * is to show on the map the selected route. To do so:\n     *  1. We obtain the user's webID\n     *  2. We search in the user's pod for the specified route\n     *  3. We display the new route on the map\n     *\n     * @param event\n     */\n    function handleSelect(event) {\n        const auth = require('solid-auth-client');\n        auth.trackSession(session => {\n            if (!session) {\n                return;\n            } else {\n                /*\n                  The webId has the structure: https://uo265308.solid.community/profile/card#me\n                  We want the structure: https://uo265308.solid.community/public/MyRoutes/\n\n                  15 == length(\"profile/card#me\")\n                */\n                let webId = session.webId;\n                let urlRouteInPod = webId.slice(0, webId.length - 15).concat(\"public/MyRoutes/\");\n\n                event.preventDefault();\n\n                // We obtain the name of the route from the combobox and build the final URL\n                let selectedRouteName = document.getElementById(\"selectRoute\").value.concat(\".json\");\n                urlRouteInPod = urlRouteInPod.concat(selectedRouteName);\n\n                const fc = new FC(auth);\n                fc.readFile(urlRouteInPod, null).then((content) => {\n\n                    // We obtain the JSON file from the pod\n                    let route = JSON.parse(content);\n\n                    // We obtain the points of the route\n                    let points = [];\n                    let elevationsValues = [];\n                    for (let i = 0; i < route.itinerary.numberOfItems; i++) {\n                        let latitude = route.itinerary.itemListElement[i].item.latitude;\n                        let longitude = route.itinerary.itemListElement[i].item.longitude;\n                        let elevationValue = route.itinerary.itemListElement[i].item.elevation.split(\" \");\n                        elevationsValues.push({ x: 'P'.concat(i+1), y: parseInt(elevationValue[0], 10)});\n                        points.push([latitude, longitude]);\n                    }\n                    // We show the points of the route in the map\n                    setOrigin(points[0]);\n                    setTarget(points[points.length - 1]);\n                    setCenter(points[0]);\n                    setPositions(points);\n                    setZoom(zoomValue);\n                    setElevation(elevationsValues);\n                    setShowElements(true);\n                })\n                    .catch(err => NotificationManager.error(t('routes.errorMessage'), t('routes.errorTitle'), 2000))\n            }\n        })\n    }\n\n    /**\n     * Load the select component with tracks\n     * @param event\n     */\n\n    function handleLoad(event) {\n        const auth = require('solid-auth-client');\n        auth.trackSession(session => {\n            if (!session) {\n                return;\n            } else {\n                /*\n                  The webId has the structure: https://uo265308.solid.community/profile/card#me\n                  We want the structure: https://uo265308.solid.community/public/MyRoutes/\n\n                  15 == length(\"profile/card#me\")\n                */\n                var webId = session.webId;\n                var urlRouteInPod = webId.slice(0, webId.length - 15).concat(\"public/MyRoutes/\");\n\n                event.preventDefault();\n\n                const fc = new FC(auth);\n                let routes = [];\n                fc.readFolder(urlRouteInPod, null).then((content) => {\n                    if (content.files.length === 0) {\n                        NotificationManager.warning(t('routes.loadWarningMessage'), t('routes.loadWarningTitle'), 2000);\n                    } else {\n                        for (let i = 0; i < content.files.length; i++) {\n                            let extension = content.files[i].name.split(\".\");\n                            if (!extension[1].localeCompare(\"json\")) {\n                                routes.push(content.files[i].name.slice(0, content.files[i].name.length - 5));\n                            }\n                        }\n                        NotificationManager.success(t('routes.successLoadMessage'), t('routes.successLoadTitle'), 2000);\n                        // Hook for select\n                        setData(routes);\n                    }\n                })\n                    .catch(err => console.error(\"Error:\" + err))\n            }\n        })\n    }\n\n    return (\n        <section>\n            <LoggedIn>\n                <Container>\n                    <Row>\n                        <h1 className=\"myH1\">{t('routes.title')}</h1>\n                    </Row>\n                    <Row>\n                        <Col sm={10}>\n                            <Row>\n                                <Map className=\"map\" center={center} zoom={zoom}>\n                                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\n                                    {showElements && (\n                                        <div>\n                                            <Polyline color={'blue'}\n                                                      positions={positions}/>\n                                            <Marker position={origin}>\n                                                <Popup>{t('routes.origin')}</Popup>\n                                            </Marker>\n                                            <Marker position={target}>\n                                                <Popup>{t('routes.target')}</Popup>\n                                            </Marker>\n                                        </div>\n                                        )}\n                                </Map>\n                            </Row>\n                            <Row>\n                                {showElements && (\n                                    <VictoryChart style={{ parent: { maxWidth: \"35%\" }}}\n                                                  domainPadding={10}\n                                                  theme={VictoryTheme.material}>\n                                        <VictoryStack colorScale={\"cool\"}>\n                                            <VictoryArea data={elevation}/>\n                                        </VictoryStack>\n                                    </VictoryChart>\n                                )}\n                            </Row>\n                        </Col>\n                        <Col>\n                            <div>\n                                <Button className=\"visualizeButton\" variant=\"primary\" onClick={handleLoad}>\n                                    {t('routes.loadButton')}\n                                </Button>\n                                <h3>{t('routes.select')}</h3>\n                                <Select id={\"selectRoute\"} options={data}/>\n                                <Button className=\"visualizeButton\" onClick={handleSelect}>\n                                    {t('routes.button')}\n                                </Button>\n                            </div>\n                        </Col>\n                    </Row>\n                    <NotificationContainer/>\n                </Container>\n            </LoggedIn>\n            <LoggedOut>\n                <Redirect to=\"/\"></Redirect>\n            </LoggedOut>\n        </section>\n    );\n}\n\nexport default VisualizeTrack;","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport FC from \"solid-file-client\";\nimport 'react-notifications/lib/notifications.css';\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport { Button } from 'react-bootstrap';\nimport \"./UploadTrack.css\";\nimport LoggedIn from \"@solid/react/module/components/LoggedIn\";\nimport LoggedOut from \"@solid/react/module/components/LoggedOut\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const UploadTrack = props => {\n\n    // Locales for i18n\n    const { t } = useTranslation();\n    let times = 0; // For success message\n\n    /**\n     * Process the case of an individual item\n     * @param item\n     * @returns {Promise<void>}\n     */\n\n    async function processItem(item) {\n        let reader = new FileReader();\n        let nameFile = item.name;\n        reader.onload = function(event) {\n            let fileContent = reader.result;\n            const auth = require(\"solid-auth-client\");\n            auth.trackSession(session => {\n                if (!session) {\n                    return;\n                } else {\n                    /*\n                      15 == length(\"profile/card#me\")\n                    */\n                    let webId = session.webId;\n                    let urlRouteInPod = webId.slice(0, webId.length - 15).concat(\"public/MyRoutes/\").concat(nameFile);\n                    event.preventDefault();\n                    const fc = new FC(auth);\n                    let extension = nameFile.split(\".\");\n                    if (!extension[1].localeCompare(\"json\")) {\n                        fc.createFile(urlRouteInPod, fileContent, \"text/turtle\", {}).then((content) => {\n                            if (times === 0) {\n                                NotificationManager.success(t(\"upload.successMessage\"), t(\"upload.successTitle\"), 2000);\n                                document.getElementById(\"fileArea\").value = \"\"; // Clear input file\n                                times++;\n                            }\n                        })\n                          .catch(err => console.error(`Error: ${err}`));\n                    } else {\n                        NotificationManager.error(t(\"upload.errorMessage\"), t(\"upload.errorTitle\"), 2000);\n                    }\n                    times = 0;\n                }\n            });\n        };\n        reader.readAsText(item);\n    }\n\n    /**\n     * Process the case of an array\n     * @param array\n     * @returns {Promise<void>}\n     */\n\n    async function processArray(array) {\n        array.forEach(async (item) => {\n            await processItem(item);\n        });\n    }\n\n    /**\n     * Perform multiple upload\n     * @returns {Promise<void>}\n     */\n\n    async function upload() {\n        const fileInput = document.getElementById(\"fileArea\");\n        const files = fileInput.files;\n        await processArray(files);\n    }\n\n    return (\n        <section>\n            <LoggedIn>\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h2>{t(\"upload.title\")}</h2>\n                    </div>\n                    <div className=\"modal-body\">\n                        <span>{t(\"upload.uploadPrompt\")}</span>\n                        <input type=\"file\" id=\"fileArea\" multiple/>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <Button onClick={upload}>\n                            {t(\"upload.button\")}\n                        </Button>\n                    </div>\n                </div>\n                <NotificationContainer/>\n            </div>\n            </LoggedIn>\n            <LoggedOut>\n                <Redirect to=\"/\"></Redirect>\n            </LoggedOut>\n        </section>\n    );\n};\n\nexport default UploadTrack;","import React from \"react\";\nimport { Navbar, Nav, DropdownButton, DropdownItem } from \"react-bootstrap\";\nimport \"./Navbar.css\";\nimport LoggedIn from \"@solid/react/module/components/LoggedIn\";\nimport {useTranslation} from \"react-i18next\";\nimport {LogoutButton} from \"@solid/react\";\nimport ReactTooltip from 'react-tooltip'\nimport i18n from 'i18next';\n\n\nconst MyNavBar = props => {\n\n    const {t} = useTranslation();\n    return (\n        <section>\n            <LoggedIn>\n                <Navbar className=\"nav-color\">\n                    <a className=\"navbar-brand a-bar a-logo\" href=\"#/\">\n                        <img src={process.env.PUBLIC_URL + \"/img/logoViaDe.svg\"} width=\"100\" height=\"45\" alt=\"ViaDe icon\"/>\n                    </a>\n                    <Nav className=\"mr-auto\">\n                        <a data-tip={t('navBar.maps')} className=\"navbar-link a-bar\" href=\"#/visualize\">\n                            <img src={process.env.PUBLIC_URL + \"/img/icon/maps-icon.png\"} width=\"40\" height=\"40\" alt=\"My tracks\"/>\n                        </a>\n\t\t\t\t\t\t <a data-tip={t('navBar.share-files')} className=\"navbar-link a-bar\" href=\"#/share\">\n                            <img src={process.env.PUBLIC_URL + \"/img/icon/share-files.svg\"} width=\"27\" height=\"49\" alt=\"Share files\"/>\n                        </a>\n                        <a data-tip={t('navBar.upload')} className=\"navbar-link a-bar\" href=\"#/upload\">\n                            <img src={process.env.PUBLIC_URL + \"/img/icon/upload-icon.png\"} width=\"40\" height=\"40\" alt=\"Upload track\"/>\n                        </a>\n                        <a data-tip={t('navBar.download')} className=\"navbar-link a-bar a-download\" href=\"#/download\">\n                            <img src={process.env.PUBLIC_URL + \"/img/icon/download-icon.svg\"} width=\"31\" height=\"25\" alt=\"Download track\"/>\n                        </a>\n                        <div className=\"i18nMenu\">\n                            <DropdownButton className=\"i18nMenu\" variant=\"light\" title={t(\"nav.language\")}>\n                                <DropdownItem>\n                                    <div onClick={() => i18n.changeLanguage(\"en\")}> ENG </div>\n                                </DropdownItem>\n                                <DropdownItem>\n                                    <div onClick={() => i18n.changeLanguage(\"es\")}> ESP </div>\n                                </DropdownItem>\n                            </DropdownButton>\n                        </div>\n                        <LogoutButton className=\"logout btn btn-light\">{t(\"logout.button\")}</LogoutButton>\n\t\t\t\t\t\t<ReactTooltip place=\"bottom\" type=\"dark\" effect=\"solid\"/>\n\t\t\t\t\t</Nav>\n                </Navbar>\n            </LoggedIn>\n        </section>\n    );\n}\n\nexport default MyNavBar;\n","import React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Select} from '../../utils/select/Select';\nimport {Button} from \"react-bootstrap\";\nimport {NotificationContainer} from \"react-notifications\";\nimport \"./ShareTrack.css\";\nimport {LoggedIn, LoggedOut} from \"@solid/react\";\nimport { Redirect } from \"react-router-dom\";\n\ntype\nProps = {\n    webId: String,\n    sendNotification: () => void,\n    contact: string,\n    setContact: () => void\n};\n\nconst data = ['Ruta1', 'Ruta2', 'Ruta3'];\n\nconst ShareTrack = ({webId, sendNotification, contact, setContact}: Props) => {\n    const uniqueIdentifier = Date.now();\n    const [setDocumentUri] = useState(`${uniqueIdentifier}.ttl`);\n    const {t} = useTranslation();\n\n    const reset = () => {\n        deshabilita();\n        setDocumentUri('');\n        //setContact('');\n    };\n\n    const deshabilita = () => {\n        alert(t('alert.message'));\n    };\n\n    /**\n     * --- NEED TO BE CHANGE ---\n     */\n    /* const onSubmit = async e => {\n        try {\n            e.preventDefault();\n\n            if (!contact || contact === '') {\n                return;\n            }\n\n            if (webId === contact) {\n                return;\n            }\n\n        } catch (e) {\n        }\n    }; */\n\n    return (\n        <section>\n            <LoggedIn>\n                <div className=\"modal-dialog\">\n                    <div onSubmit={deshabilita} className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h2>{t('share.title')}</h2>\n                            <hr/>\n                        </div>\n                        <form className=\"modal-body\">\n                            <span>{t('share.createSharePrompt')}</span>\n                            <div className=\"primera\">\n                                <label className=\"lab\" htmlFor=\"documentUriInput\">\n                                    {t('share.idLabel')}\n                                </label>\n                                <Select className=\"sel\" options={data}/>\n                            </div>\n                            <div>\n                                <label>\n                                    {t('share.contactWebIDLabel')}\n                                    <input className=\"correct-margin\"\n                                           type=\"text\"\n                                           onChange={e => setContact(e.target.value)}\n                                           data-testid=\"webId\"\n                                    />\n                                </label>\n                            </div>\n                            <div>\n                                <Button className=\"correct-margin\" type=\"submit\" data-testid=\"form-submit\">\n                                    {t('share.shareTrack')}\n                                </Button>\n                                <Button className=\"correct-margin\" onClick={reset}>\n                                    {t('share.resetShareForm')}\n                                </Button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <NotificationContainer/>\n            </LoggedIn>\n            <LoggedOut>\n                <Redirect to=\"/\"></Redirect>\n            </LoggedOut>\n        </section>\n    );\n};\n\nexport default ShareTrack;","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from 'react-bootstrap';\nimport {LoggedIn, LoggedOut } from \"@solid/react\";\nimport { Redirect } from \"react-router-dom\";\nimport FC from 'solid-file-client';\nimport auth from 'solid-auth-client';\nimport {NotificationContainer, NotificationManager} from \"react-notifications\";\n\n\n\nexport const DownloadTrack = props => {\n\n    const { t } = useTranslation();\n\n    const fc = new FC(auth);\n\n    var urlGlobal=\"\";\n    function setGlobal(newUrl){\n        urlGlobal = newUrl;\n    }\n\n    async function downloadRoute(name){\n        var file = await fc.readFile(urlGlobal);\n        var blob = new Blob([file], {type: 'application/json'});\n        console.log(file);\n        var link = document.getElementById(\"downFile\");\n        link.href= URL.createObjectURL(blob);\n        link.download=name+\".json\";\n        link.click();\n\n    }\n\n\n    async function searchRoute() {\n        const auth = require('solid-auth-client');\n        auth.trackSession(session => {\n            if (!session) {\n                return;\n            } else {\n                var txt = document.getElementById(\"txtUrl\").value;\n\n                let webId = session.webId;\n                let urlRoute = webId.slice(0, webId.length - 15).concat(\"public/MyRoutes/\"+ txt +\".json\");\n                setGlobal(urlRoute);\n                downloadRoute(txt)\n                .catch(err => NotificationManager.error(t('download.errorMessage'), t('download.errorTitle'), 5500));\n            }\n        }); \n    }\n\n\n    return(\n        <section>\n            <LoggedIn>\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h2>{t('download.title')}</h2>\n                        </div>\n                        <div className=\"modal-body\">\n                            <h4>{t('download.instruction')}</h4>\n                            <input id = \"txtUrl\" type=\"text\"></input>\n\t\t\t\t\t\t\t<p>{t('download.especificacion')}</p>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <a href=\"\" id=\"downFile\"> </a>\n                            <Button onClick={searchRoute} > {t('download.button')}</Button>\n                        </div>\n                    </div>\n                </div>\n                <NotificationContainer/>\n            </LoggedIn>\n            <LoggedOut>\n                <Redirect to=\"/\"></Redirect>\n            </LoggedOut>\n        </section>\n    );\n}\n\nexport default DownloadTrack;","import React from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {LoggedOut, useWebId} from '@solid/react';\nimport \"./Welcome.css\";\nimport LoggedIn from \"@solid/react/module/components/LoggedIn\";\nimport { Redirect } from \"react-router-dom\";\n\nexport const Welcome = props => {\n    const {t} = useTranslation();\n    const webId = useWebId();\n\n    return (\n        <section>\n            <LoggedIn>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm\">\n                            <img className=\"myImg\" src={process.env.PUBLIC_URL + \"/img/logoViaDe.svg\"} alt=\"Logo ViaDe\"></img>\n                        </div>\n                        <div className=\"col-sm\">\n                            <h1 className=\"h1-welcome\">{t('welcome.welcome')}</h1>\n                            <span>{webId}</span>\n                        </div>\n                        <div className=\"col-sm\">\n                            <h2 className=\"myH2\">{t('welcome.title')}</h2>\n                            <ul>\n                                <li>{t('welcome.presentation')}</li>\n                                <li><a\n                                    href=\"https://arquisoft.github.io/viade_es1c/docs/\">{t('welcome.documentation')}</a>\n                                </li>\n                                <li><a href=\"https://github.com/Arquisoft/viade_es1c\">{t('welcome.repository')}</a></li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </LoggedIn>\n            <LoggedOut>\n                <Redirect to=\"/\"></Redirect>\n            </LoggedOut>\n        </section>\n    );\n}\n\nexport default Welcome;","import React from \"react\";\nimport {useTranslation} from \"react-i18next\";\nimport {LoggedOut, LoggedIn, LoginButton } from '@solid/react';\nimport {Redirect} from \"react-router-dom\";\nimport \"./Login.css\";\n\nexport const Login = props => {\n    const {t} = useTranslation();\n\n    return (\n        <div style={{ background: 'url(' + process.env.PUBLIC_URL +`/img/background-image.jpg` + ')'\n            , backgroundRepeat: 'no-repeat', height: '100vh', width:'100vw'\n            , backgroundPosition: 'center', backgroundSize: 'cover' }}>\n            <LoggedOut>\n                <div className=\"Login\">\n                    <h2>{t(\"login.title\")}</h2>\n                    <div >\n                        <LoginButton className=\"btn btn-primary a-solid button-login\" popup=\"https://solid.github.io/solid-auth-client/dist/popup.html\">\n                            {t(\"login.formButtonText\")}\n                        </LoginButton>\n                    </div>\n                    <a\n                        href=\"https://solid.inrupt.com/get-a-solid-pod\"\n                        rel=\"noopener noreferrer\"\n                        target=\"_blank\"\n                        className=\"link\"\n                    >\n                        {t('login.solidHelp')}\n                    </a>\n                </div>\n            </LoggedOut>\n            <LoggedIn>\n                <Redirect to=\"/welcome\"></Redirect>\n            </LoggedIn>\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport VisualizeTrack from '../containers/visualizeTracks/VisualizeTrack';\nimport UploadTrack from \"../containers/uploadTracks/UploadTrack\";\nimport MyNavBar from \"../navBar/NavBar\";\nimport ShareTrack from \"../containers/shareTracks/ShareTrack\";\nimport DownloadTrack from \"../containers/downloadTracks/DownloadTrack\";\nimport Welcome from \"../containers/welcome/Welcome\";\nimport Login from \"../containers/login/Login\";\n\nexport default function Routes() {\n    return (\n        <HashRouter>\n                <MyNavBar/>\n                <Switch>\n                    <Route exact path=\"/welcome\" component={Welcome}/>\n                    <Route exact path=\"/visualize\" component={VisualizeTrack}/>\n                    <Route exact path=\"/upload\" component={UploadTrack}/>\n                    <Route exact path=\"/share\" component={ShareTrack}/>\n                    <Route exact path=\"/download\" component={DownloadTrack}/>\n                    <Route exact path=\"/login\" component={Login}/>\n                    <Route exact path=\"/\" component={Login}/>\n                    <Redirect to=\"/\"></Redirect>\n                </Switch>\n        </HashRouter>\n    );\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Routes from \"./components/routes/Routes\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nconst backend = new Backend(null, { loadPath: \"locales/{{lng}}/{{ns}}.json\" });\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to the react-i18next components.\n  // Alternative use the I18nextProvider: https://react.i18next.com/components/i18nextprovider\n  .use(initReactI18next)\n  .init({\n    fallbackLng: 'en',\n    debug: false,\n    whitelist: ['en', 'es'],\n    // special options for react-i18next\n    // learn more: https://react.i18next.com/components/i18next-instance\n    react: {\n      wait: true,\n      useSuspense: false\n    }\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18n';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}